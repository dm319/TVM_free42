;-----------------------------------------------------------------------------
; #  | N  | I%YR | PV | PMT   | FV | P/YR | End ||   TVM v9    |   Plus42    |
;----|----|------|----|-------|----|------|-----||-------------|-------------|
; 01 | ?  |  5%  | 1M | -5k   | 0  |  12  | yes ||    430.9175 |    430.9175 |
; 02 | ?  |  5%  | 1M | -5k   | 0  |  12  | no  ||    425.9790 |    425.9790 |
; 03 | 1k |  ?   | 1M | -2000 | 0  |  12  | yes ||      1.9113 |      1.9113 |
; 04 | 1k |  ?   | 1M | -2000 | 0  |  12  | no  ||      1.9164 |      1.9164 |
; 05 | 1k |  5%  | ?  | -2000 | 0  |  12  | yes || 472493.4501 | 472493.4501 |
; 06 | 1k |  5%  | ?  | -2000 | 0  |  12  | no  || 474462.1728 | 472493.4501 |
; 07 | 1k |  5%  | 1M | ?     | 0  |  12  | yes ||  -4232.8629 |  -4232.8629 |
; 08 | 1k |  5%  | 1M | ?     | 0  |  12  | no  ||  -4215.2992 |  -4215.2992 |
;-----------------------------------------------------------------------------

; Original test cases:
;------------------------------------------------------------------------------------------------------
; #  | N            | I%YR      | PV       | PMT          | FV        | P/YR | End || TVM v9 | Plus42 |
;----|--------------|-----------|----------|--------------|-----------|------|-----||--------|--------|
; 1  | 38 x 12      | 5.25%     | 270'000  | ?            | 0         | 12   | yes ||  34    |  34    |
; 1b | 38 x 12      | ?         | 270'000  | -14'584/12   | 0         | 12   | yes ||  33.1  |  33.1  |
; 2  | 360          | 15% → 12% | 100'000  | ?-?          | 0         | 12   | yes ||  33.2  |  32.4  |
; 3  | 60x60x24x365 | 10%       | 0        | -0.01        | ?         | =N   | yes ||  32.7  |  33.7  |
; 4  | 480          | 0 → ?     | 100'000  | ?→ PMT       | 0         | 12   | yes ||  Inf   |  Inf   |
; 5  | 10           | ?         | 50       | -30          | 400       | 1    | yes ||  32.3  |  31.8  |
; 6  | 10           | ?         | 50       | -30          | 80        | 1    | yes ||  32.5  |  32.3  |
; 7  | 10           | ?         | -100     | 10           | 1e-10     | 12   | yes ||  31.1  |  31.4  |
; 8  | 32           | ?         | -999'999 | 0            | 1e6       | 1    | yes ||  39.2  |  35.5  |
; 9  | ?            | 25        | 100000   | -2083.333334 | 0         | 12   | yes ||  33.4  |  29.8  |
; 10 | ?            | 25        | 100000   | -2040.816327 | 0         | 12   | no  ||  33.4  |  30.3  |
; 11 | 60x24x365    | 1/6% → ?  | 0        | -0.01        | ?→ FV     | =N   | yes ||  28.6  |  31    |
; 12 | 40           | ? → I%YR  | 900      | -400         | -1000 → ? | 1    | no  ||  Inf   |  23.7  |
;------------------------------------------------------------------------------------------------------

; FLAG 00  0 → Nothing   is returned (default)
;          1 → Something is returned. Used by N, I%YR, PV, PMT, FV, →AER
; FLAG 01  Used for temporary purposes 
; "p"      0 → End_Mode,   use TVM menu (which shows "START" & "END•")
;          1 → Begin_Mode, use MENU2    (which shows "STAR•" & "END")

; On a first run, Plus42 doesn't need FV entered to do #1, Duncan's program does. I changed that. 

; Plus42's menus stay at their level and only change via the up/down buttons. Different for :TVM
; Plus42 doesn't AVIEW anything when you do CLEAR, this program does.
; Plus42 uses BEGIN, :TVM uses START  ???
; Could we make a SHOW TVM so you can see ALL the 5 primary numbers? (only practical in Plus42)
; Made LOCAL variables for: den, num, k, y, f0, f, g, pv, fv, fpp, fp2, eps, a, b, c, d
; In Plus42, if you change modes then you can't recalculate a variable with one press. You can here :-) 

; Darn it - this will cause trouble, it also requires Free42 3.0...
; NOTE: In Free42 (but not in Plus42), Allow Big Stack (NSTK) mode must be turned on
;       in the Preferences in order to use the NSTK or LNSTK functions. If not, you
;       will get the Big Stack Disabled error message when trying to use them.

; Add in LOCK as a program step
; Many expensive DROP commands done vs judiciously using CLX
; Changed local labels for everything except the untouched I%YR stuff to uppercase A-F (local Alpha Labels)
; Changed my CONSTANTS program to use local Alpha Labels a-e
; "I%YR" is the only function that still uses LNSTK
; Fixed: PMT had a bug in the formula for START mode when i≠0
; There is no LBL "IYR?"  ???? What does it do?
; What does "→AER" do?
; Removed STO "RESET", "CLEAR", "START", "STAR•", "END" & "END•" because they are pointless,
; also removed (the original) FLAG 01 and merged everything into "p"
; Can I rename "p" to something else (unless it's already a standard variable name)
; This program clutters Free42 with global variables that may exist in other user programs :-( 
; Removed STO IND "var" & DROP before RTN in all MVAR routines that return a value
; Change Result VIEW to var→result vs var=result to distinguish it from an MVAR STO. Plus42 is super confusing. 

; ERROR HANDLING:
; Need to be robust against a consecutive press when all the necessary variables haven't been entered.
; Need to be robust against impossible solutions yielding an error.
; Should I fix the fact that this mangles LASTx?
; If the calculation for "I%YR" breaks you'll unexpectedly end up in NSTK mode :-( 
; Need to do more error checking e.g. for illegal non-real values 
; If you do a first run and stupidly just press "N" then you get "Nonexistent", however program 
; execution has stopped at the error so now even doing START or STOP is broken because the program pointer 
; is still in the same place that caused the error. Need a way to catch these silly errors.
; Plus42 gives you N=1 in this case. It also filters out N=0 as Invalid Data
; Filter for N not being an integer and <0, PV=FV (?), PMT=0 (?), existence of required variables per function,
; odd values in START and END (strictly speaking they shouldn't exist)

000▸LBL "TVM" ; primary menu (START, END•) to indicate END mode
001 MVAR "N"
002 MVAR "I%YR"
003 MVAR "PV"
004 MVAR "PMT"
005 MVAR "FV"
006 MVAR "CLEAR"
007 MVAR "P/YR"
008 MVAR "BEGIN"
009 MVAR "END•"
010 MVAR "RESET"
011 MVAR "IYR?"
012 MVAR "→AER"
013 GTO  G
014▸LBL "MENU2" ; second menu (BEGI•, END) to indicate begin mode
015 MVAR "N"
016 MVAR "I%YR"
017 MVAR "PV"
018 MVAR "PMT"
019 MVAR "FV"
020 MVAR "CLEAR"
021 MVAR "P/YR"
022 MVAR "BEGI•"
023 MVAR "END"
024 MVAR "RESET"
025 MVAR "IYR?"
026 MVAR "→AER"

027 LBL G
028 XEQ "RESET"    ; Main initialization. Does NOT clear all variables.
;---;-----------------------------
029▸LBL A          ; MAIN RUN LOOP (doesn't harm the stack)
;---;-----------------------------
030 XEQ "P"        ; run print subroutine
031 FC?C 00
032 AVIEW          ; Show the TVM state if a menu variable wasn't solved.
033 CLA
034 VARMEN1 "TVM"
035 0≠? "p"        ; select correct menu according to START or STOP mode
036 VARMEN1 "MENU2"
037 STOP 
;                  ; When a VARMENU key is pressed immediately following another, it 
;                  ; puts MVAR in the Alpha-register and does XEQ IND MVAR from here.
;                  ; In all other cases, it performs STO IND MVAR and a VIEW IND MVAR
;                  ; and doesn't advance the program pointer. This allows dumb things   
;                  ; like storing values in START or END without setting the mode :-( 
;---;-----------------------------
038 FC? 80         ; Check if in 4STK, if so store X, then CLX
039 LSTO G         ; I know this is ugly
040 FC? 80         ;
041 CLX            ;
;---;-----------------------------
042 ALENG          ; check for exit
043 X=0?           ;
044 GTO 39         ; exit
;---;-----------------------------
045 FS? 80         ; if NSTK just drop
046 DROP
047 FC? 80         ; if 4STK return X value to stack
048 X<> "G"
;---;-----------------------------
049 ASTO "var"     ; A consecutive press occurred, MVAR placed in X
050 XEQ IND "var"  ; XEQ the menu variable. X contains the result if a calculation was done.
051 FC? 00         ; Check if nothing was placed in X 
052 GTO A          ; Nothing was returned
053 STO IND "var"  ; Something was returned: save and view it
054 ├":"           ; Use ":" vs "=" to distinguish between MVAR store and MVAR result
055 ARCL ST X 
056 AVIEW
057 GTO A
;---;--------------------------------------------------------------------------------------------
058 LBL "P"        ; create alpha display
;---;--------------------------------------------------------------------------------------------
059 FUNC 00
060 "P/YR="        ; print alpha display. show #payments/year and start/end mode.
061 RCL "P/YR"     ; payments/year (and temporarily save X-register in "P/YR")
062 AIP            ; append the integer part of X to the alpha register 
063 0=? "p"
064 ├" END"
065 0≠? "p"
066 ├" BEGIN"
067 CLX
068 RTN

;---;--------------------------------------------------------------------------------------------
069▸LBL "RESET" ; TVM INITIALIZATION,  p=0 (END mode), FV=IYR?=RESET=0, P/YR=12
;   ; Leaves the stack untouched
;   ; Merged old LBL 01 and RESET
;   ; ??? I also changed this to do FV=0 (consistent with Plus42 I think)
;---;--------------------------------------------------------------------------------------------
070 FUNC 00
071 12
072 STO "P/YR"   ; Set Payments/Yr to 12
073 CLX
074 STO "FV"     ; Set FV=0
075 STO "IYR?"   ; Set IYR?=0
076 STO "p"
077 RTN
;---;--------------------------------------------------------------------------------------------
078▸LBL "CLEAR"  ; clear all variables and SF 00. Leaves the stack untouched
;---;--------------------------------------------------------------------------------------------
079 FUNC 00
080 0
081 STO "PV"
082 STO "PMT"
083 STO "FV"
084 STO "I%YR"
085 STO "IYR?"
086 STO "N"
087 RTN
;---;--------------------------------------------------------------------------------------------
088▸LBL "BEGIN"
089▸LBL "BEGI•"  ; Begin mode ("p"=1)
;---;--------------------------------------------------------------------------------------------
090 FUNC 00
091 1
092 STO "p"      ; save X-register
093 CLX
094 RTN
;---;--------------------------------------------------------------------------------------------
095▸LBL "END" 
096▸LBL "END•"   ; End mode ("p"=0)
;---;--------------------------------------------------------------------------------------------
097 FUNC 00
098 0
099 STO "p"      ; save X-register
100 CLX
101 RTN
;---;--------------------------------------------------------------------------------------------
102▸LBL "P/YR" ; ??? Why is this needed?
;---;--------------------------------------------------------------------------------------------
103 STO "P/YR"
104 RTN
;---;--------------------------------------------------------------------------------------------
105▸LBL "N"    ; Solve for N (for i=0 & i≠0) (+2)
;---;--------------------------------------------------------------------------------------------
106 FUNC 01
107 SF 00      ; To signify this routine returns an answer in X
108 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
109 XEQ I      ; creates "i" and leaves it in X 
110 X=0?
111 GTO B      ; <---- Calculate N(i=0)  -(PV+FV)/PMT
112 1/X        ; <---- Calculate N(i≠0)  -ln[(PMT*(p+1/i)+PV)/(PMT*(p+1/i)-FV)]/ln(1+i)
113 RCL+ "p"   ; Optimized the way this formula was calculated
114 RCL× "PMT"
115 ENTER
116 RCL+ "PV"
117 X<>Y
118 RCL- "FV"
119 ÷
120 LN
121 RCL "i"
122 LN1+X
123 ÷
124 +/-
125 RTN
126▸LBL B      ; <---- Calculate N(i=0)
127 RCL "PV"
128 RCL+ "FV"
129 +/-
130 RCL÷ "PMT" ; This is the calculated value of N
131 RTN
;---;--------------------------------------------------------------------------------------------
132▸LBL "PV"   ; Solve for PV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
133 FUNC 01
134 SF 00      ; To signify this routine returns an answer in X
135 SF 01      ; Calculate "F" within XEQ I
136 XEQ I      ; creates "i" & "F" and leaves "i" in X 
137 X=0?
138 GTO C      ; <---- Calculate PV(i=0)   -(FV+PMT*N)
139 1/X        ; <---- Calculate PV(i≠0)   [PMT*(p+1/i)*(1-F)-FV]/F
140 RCL+ "p"   ; Optimized the way this formula was calculated
141 RCL× "PMT"
142 1
143 RCL- "F"
144 ×
145 RCL- "FV"
146 RCL÷ "F"
147 RTN
148▸LBL C      ; <---- Calculate PV(i=0)
149 RCL "PMT"
150 RCL× "N"
151 RCL+ "FV"
152 +/-
153 RTN
;---;--------------------------------------------------------------------------------------------
154▸LBL "FV"   ; Solve for FV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
155 FUNC 01
156 SF 00      ; To signify this routine returns an answer in X
157 SF 01      ; Calculate "F" within XEQ I
158 XEQ I      ; creates "i" & "F" and leaves "i" in X 
159 X=0?
160 GTO D      ; <---- Calculate FV(i=0)   -(PV+PMT*N)
161 1/X        ; <---- Calculate FV(i≠0)   PMT*(p+1/i)*(1-F)-PV*F    merged XEQ 22
162 RCL+ "p"   ; Optimized the way this formula was calculated
163 RCL× "PMT"
164 1
165 RCL- "F"
166 ×
167 RCL "PV"
168 RCL× "F"
169 -
170 RTN
171▸LBL D      ; <---- Calculate FV(i=0)
172 RCL "PMT"
173 RCL× "N"
174 RCL+ "PV"
175 +/-
176 RTN
;---;--------------------------------------------------------------------------------------------
177▸LBL "PMT"  ; Solve for PMT (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
178 FUNC 01
179 SF 00      ; To signify this routine returns an answer in X
180 SF 01      ; Calculate "F" within XEQ I
181 XEQ I      ; creates "i" & "F" and leaves "i" in X 
182 X=0?
183 GTO E      ; <---- Calculate PMT(i=0)   (FV-PV)/N
184 1/X        ; <---- Calculate PMT(i≠0)   (PV*F+FV)/(p+1/i)/(1-F)   merged LBL 19
185 RCL+ "p"   ; Optimized the way this formula was calculated
186 1
187 RCL- "F"
188 ×
189 RCL "PV"
190 RCL× "F"
191 RCL+ "FV"
192 X<>Y
193 ÷
194 RTN
195▸LBL E      ; <---- Calculate PMT(i=0)
196 RCL "FV"
197 RCL- "PV"
198 RCL÷ "N"
199 RTN
;---;--------------------------------------------------------------------------------------------
200▸LBL "→AER" ;  Calculates 100*((1+i)^"P/YR"-1)
;---;--------------------------------------------------------------------------------------------
201 FUNC 01
202 SF 00      ; To signify this routine returns an answer in X
203 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
204 XEQ I      ; Went this route vs calculating "i" in-place
205 1
206 +
207 RCL "P/YR"
208 Y↑X
209 1
210 -
211 100
212 ×
213 RTN
;---;--------------------------------------------------------------------------------------------
214▸LBL I   ; Calculates i = "I%YR"/100/"P/YR" and (optionally) F = (1+i)^N
;   ;       ; (+2), Returns with "i" in X) Called by N, FV, PV, PMT, →AER
;---;--------------------------------------------------------------------------------------------
215 RCL "P/YR"
216 1/X
217 RCL "I%YR"
218 %
219 STO "i"    ; i = "I%YR"/100/"P/YR"
220 FC? 01     ; Need to catch if "N" is defined for the RCL× "N" below
221 RTN
222 LN1+X
223 RCL× "N"   ; ??? BUG if calculating N, FV, PV or PMT when "N" isn't defined yet! 1st time run 
224 E↑X
225 STO "F"    ; F = e^(N*ln(1+i))  <---- ??? isn't this just (1+i)^N
226 RCL "i"    ; ??? Changed this to return "i" vs "I%YR"
227 RTN
;---;--------------------------------------------------------------------------------------------
228▸LBL "I%YR" ;  (for Begin_mode & End_mode) Consumes LBLs 24-5, 41-2, 30-7
;---; Holy cow this is unbelievably complex! Consumes 10 local labels.
;---;--------------------------------------------------------------------------------------------
229 FUNC 01
230 LNSTK
231 SF 00      ; To signify this routine returns an answer in X
232 0=? "p"    ; (removed RCL "p", X=0?)
233 GTO 07     ; End mode
234 RCL "PV"   ; <---- Calculate I%YR(Begin_mode)
235 RCL+ "PMT"
236 LSTO "pv"   ; pv = PV+PMT
237 RCL "FV"
238 RCL- "PMT"
239 LSTO "fv"   ; fv = FV-PMT
240 GTO 08
;---;-----------------------
241▸LBL 07     ; <---- Calculate I%YR(End_mode) - simply copy values
;---;-----------------------
242 RCL "FV"
243 LSTO "fv"
244 RCL "PV"
245 LSTO "pv"
;---;-----------------------
246▸LBL 08     ; referenced by 239
;---;-----------------------
247 RCL "IYR?" ; needed to return this or else the guess isn't used
248 X=0?
249 XEQ 29     ; if not, run interest rate guess
250 STO "I%YR" ; starting interest rate,  ??? another redundant calculation of "i"
251 RCL "P/YR"
252 1/X
253 %
254 STO "i"    ; starting i = "I%YR"/100/"P/YR"
255 CLX 
256 2
257 LSTO "g"    ; force at least 2 cycles of the loop
258 CLX
259 LSTO "f"
260 CLX        ; used to be DROP
;---;-----------------------
261▸LBL 09     ; start of Newton solve (adapted from plus42).
;              ; (+3) Spans LBLs 30-37. referenced by 380, 386, 400
;---;-----------------------
262 RCL "f"
263 LSTO "eps"
264 LSTO "f0"
265 CLX
;---;-----------------------
266 RCL "i"    ; check for very tiny i
267 X↑2
268 RCL× "N"
269 1
270 +
271 1
272 X=Y?
273 GTO 38     ; if so switch to secant method
274 DROPN 2
;---;-----------------------
275 RCL "i"    ; check for quite tiny i
276 X↑2
277 RCL× "N"
278 1ᴇ10
279 ÷
280 1
281 +
282 1
283 X=Y?
284 GTO 17     ; if so switch to quadratic method
285 DROPN 2
;---;-----------------------
;              ; the newton method
;---;-----------------------
286 RCL "i"
287 LN1+X
288 RCL× "N"
289 E↑X-1
290 RCL "i"
291 X<>Y
292 ÷
293 DUP
294 RCL "N"
295 ×
296 1
297 -
298 LSTO "y"
299 DROP
300 RCL "pv"
301 RCL+ "fv"
302 ×
303 LSTO "k"
304 RCL "pv"
305 RCL× "i"
306 +
307 RCL+ "PMT"
308 LSTO "f"
309 DROP
310 RCL "N"
311 1
312 -
313 RCL× "i"
314 RCL+ "y"
315 LSTO "num"
316 DROP
317 RCL "i"
318 ENTER
319 ×
320 RCL+ "i"
321 LSTO "den"  ; ??? only used 3 & 7 lines later (use the stack)
322 DROP
323 RCL "f"
324 RCL× "den"
325 RCL "k"
326 RCL× "num"
327 RCL "pv"
328 RCL× "den"
329 -
330 ÷
331 LSTO "eps"
332 RCL+ "i"
333 STO "i"
334 DROP
335 GTO 18     ; check success of iteration
;---;-----------------------
336▸LBL 17     ; the quadratic method. (+1) referenced by 271
;---;-----------------------
337 DROPN 2
338 RCL "pv"
339 RCL+ "fv"
340 RCL "N"
341 RCL× "PMT"
342 +
343 RCL÷ "N"
344 LSTO "f"
345 RCL- "PMT"
346 LSTO "a"
347 DROP
348 RCL "N"
349 X↑2
350 1
351 -
352 RCL× "a"
353 6
354 ÷
355 RCL× "i"
356 LSTO "b"
357 DROP
358 RCL "pv"
359 RCL- "fv"
360 RCL+ "a"
361 2
362 ÷
363 RCL+ "b"
364 STO "fp"
365 DROP
366 RCL "fp"
367 RCL "b"
368 2
369 ÷
370 -
371 RCL× "i"
372 RCL+ "f"
373 LSTO "f"
374 DROP
375 RCL "f"
376 +/-
377 RCL÷ "fp"
378 LSTO "eps"
379 RCL+ "i"
380 LSTO "i"
381 DROP
382 GTO 18      ; check success of iteration
;---;-----------------------
383▸LBL 38      ; the secant method
;---;-----------------------
384 DROPN 2
385 RCL "pv"
386 RCL+ "fv"
387 RCL÷ "N"
388 LSTO "a"
389 DROP
390 RCL "pv"
391 RCL- "fv"
392 LSTO "b"
393 DROP
394 RCL "a"
395 RCL+ "b"
396 2
397 ÷
398 STO "fp"
399 DROP
400 RCL "N"
401 ENTER
402 ×
403 1
404 -
405 RCL× "a"
406 6
407 ÷
408 LSTO "fpp"
409 DROP
410 RCL "fp"
411 RCL× "i"
412 RCL+ "PMT"
413 RCL+ "a"
414 LSTO "f"
415 DROP
416 RCL "fpp"
417 RCL× "i"
418 RCL+ "fp"
419 LSTO "fp2"
420 DROP
421 RCL "f"
422 +/-
423 RCL÷ "fp2"
424 LSTO "eps"
425 RCL+ "i"
426 STO "i"
427 DROP
;---;-----------------------
428▸LBL 18     ; (+2) referenced by 322
;---;-----------------------
429 RCL "g"    ; forces at least two cycles of loop
430 X>0?
431 GTO 19
432 DROP       ; this used to be GTO 35 which was only called from here so I merged it
433 RCL "f0"
434 ABS
435 RCL "f"
436 ABS
437 X≥Y?       ; is guess worsening or same?
438 GTO 27
439 DROPN 2
440 GTO 09     ; return to start, going to 30 with nothing on the stack
;---;-----------------------
441▸LBL 19     ; Decrement "g" and GTO 09 (+1) referenced by 371  ??? there has to be a way to do DSE "g"
;---;-----------------------
442 1
443 -
444 LSTO "g"
445 DROP
446 GTO 09     ; going to 30 with nothing on the stack
;---;-----------------------
447▸LBL 27     ; referenced by 378
;---;-----------------------
448 DROPN 2
449 RCL "eps"
450 1000
451 ÷
452 RCL "i"
453 X<>Y
454 -
455 RCL "i"
456 X=Y?       ; break if good guess
457 GTO 28
458 DROPN 2    ; merged in LBL 38
459 RCL "i"
460 GTO 09     ; going to 30 with an item on the stack  ???? (as opposed to LBL 32,34)
;---;-----------------------
461▸LBL 28     ; referenced by 397
;---;-----------------------
462 DROPN 3
463 RCL "eps"
464 2
465 ÷
466 RCL "i"
467 X<>Y
468 -           ; last improvement to i solve post break.
469 RCL× "P/YR" ; i -> I%YR
470 100
471 ×
472 RTN
;---;-----------------------
473▸LBL 29     ; initial interest rate guess (via Albert Chan's code). Contains LBL 25. referenced by 247
;              ; Takes no inputs, returns a guess for I%YR
;---;-----------------------
474 RCL "fv"
475 RCL+ "pv"
476 RCL÷ "N"
477 LSTO "a"    ; a = (fv+pv)/N
478 RCL "fv"
479 RCL- "pv"
480 X<>Y
481 -
482 LSTO "b"    ; b = (fv-pv) - (fv+pv)/N
483 DROP
484 RCL "PMT"
485 RCL+ "a"
486 RCL÷ "b"
487 LSTO "c"    ; c = PMT+a+b   ??? only used once 9 lines later (use the stack)
488 RCL "N"
489 X↑2
490 RCL× "a"
491 ×
492 RCL÷ "b"
493 LSTO "d"    ; d = a/b*N^2   ??? only used once 4 lines later (use the stack)
494 3
495 -
496 RCL× "c"
497 RCL "d"
498 1.5
499 -
500 ÷
501 RCL× "P/YR" ; guess = "P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
502 100
503 ×           ; guess = 100*"P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
504 X>=0?       ; if guess is positive then return 
505 RTN
506 RCL "fv"    ; back up i guess (edge guess). referenced by 506 (was LBL 25)
507 RCL "pv"
508 ×           ; 2 items on the stack at this point
509 X≠0?        ; fv*pv = 0?
510 GTO 37
511 DROP 
512 RTN
513 LBL 37
514 DROPN 2     ; Y-register no longer needed.  
515 RCL "PMT"
516 RCL÷ "fv"
517 RCL "PMT"
518 +/-
519 RCL÷ "pv"
520 X>Y?        ; this can get cleaned up
521 X<>Y
522 CLX
523 100
524 ×
525 RTN
526 LBL 39      ; cleanup on exit
527 FS? 80
528 DROP
529 FC? 80
530 X<> "G"
531 END
