;-----------------------------------------------------------------------------
; #  | N  | I%YR | PV | PMT   | FV | P/YR | End ||   TVM v9    |   Plus42    |
;----|----|------|----|-------|----|------|-----||-------------|-------------|
; 01 | ?  |  5%  | 1M | -5k   | 0  |  12  | yes ||    430.9175 |    430.9175 |
; 02 | ?  |  5%  | 1M | -2000 | 0  |  12  | no  ||    425.9790 |    425.9790 |
; 03 | 1k |  ?   | 1M | -2000 | 0  |  12  | yes ||      1.9113 |      1.9113 |
; 04 | 1k |  ?   | 1M | -2000 | 0  |  12  | no  ||      1.9164 |      1.9164 |
; 05 | 1k |  5%  | ?  | -2000 | 0  |  12  | yes || 472493.4501 | 472493.4501 |
; 06 | 1k |  5%  | ?  | -2000 | 0  |  12  | no  || 474462.1728 | 472493.4501 |
; 07 | 1k |  5%  | 1M | ?     | 0  |  12  | yes ||  -4232.8629 |  -4232.8629 |
; 08 | 1k |  5%  | 1M | ?     | 0  |  12  | no  ||  -4215.2992 |  -4215.2992 |
;-----------------------------------------------------------------------------

; Original test cases:
;------------------------------------------------------------------------------------------------------
; #  | N            | I%YR      | PV       | PMT          | FV        | P/YR | End || TVM v9 | Plus42 |
;----|--------------|-----------|----------|--------------|-----------|------|-----||--------|--------|
; 1  | 38 x 12      | 5.25%     | 270'000  | ?            | 0         | 12   | yes ||  34    |  34    |
; 1b | 38 x 12      | ?         | 270'000  | -14'584/12   | 0         | 12   | yes ||  33.1  |  33.1  |
; 2  | 360          | 15% → 12% | 100'000  | ?-?          | 0         | 12   | yes ||  33.2  |  32.4  |
; 3  | 60x60x24x365 | 10%       | 0        | -0.01        | ?         | =N   | yes ||  32.7  |  33.7  |
; 4  | 480          | 0 → ?     | 100'000  | ?→ PMT       | 0         | 12   | yes ||  Inf   |  Inf   |
; 5  | 10           | ?         | 50       | -30          | 400       | 1    | yes ||  32.3  |  31.8  |
; 6  | 10           | ?         | 50       | -30          | 80        | 1    | yes ||  32.5  |  32.3  |
; 7  | 10           | ?         | -100     | 10           | 1e-10     | 12   | yes ||  31.1  |  31.4  |
; 8  | 32           | ?         | -999'999 | 0            | 1e6       | 1    | yes ||  39.2  |  35.5  |
; 9  | ?            | 25        | 100000   | -2083.333334 | 0         | 12   | yes ||  33.4  |  29.8  |
; 10 | ?            | 25        | 100000   | -2040.816327 | 0         | 12   | no  ||  33.4  |  30.3  |
; 11 | 60x24x365    | 1/6% → ?  | 0        | -0.01        | ?→ FV     | =N   | yes ||  28.6  |  31    |
; 12 | 40           | ? → I%YR  | 900      | -400         | -1000 → ? | 1    | no  ||  Inf   |  23.7  |
;------------------------------------------------------------------------------------------------------

; FLAG 00  0 → Nothing   is returned (default)
;          1 → Something is returned. Used by N, I%YR, PV, PMT, FV, →AER
; FLAG 01  Used for temporary purposes 
; "p"      0 → End_Mode,   use TVM menu (which shows "START" & "END•")
;          1 → Start_Mode, use MENU2    (which shows "STAR•" & "END")

; On a first run, Plus42 doesn't need FV entered to do #1, Duncan's program does. I changed that. 

; Plus42's menus stay at their level and only change via the up/down buttons. Different for :TVM
; Plus42 doesn't AVIEW anything when you do CLEAR, this program does.
; Plus42 uses BEGIN, :TVM uses START  ???
; Could we make a SHOW TVM so you can see ALL the 5 primary numbers? (only practical in Plus42)
; Made LOCAL variables for: den, num, k, y, f0, f, g, pv, fv, fpp, fp2, eps, a, b, c, d
; In Plus42, if you change modes then you can't recalculate a variable with one press. You can here :-) 

; Darn it - this will cause trouble, it also requires Free42 3.0...
; NOTE: In Free42 (but not in Plus42), Allow Big Stack (NSTK) mode must be turned on
;       in the Preferences in order to use the NSTK or LNSTK functions. If not, you
;       will get the Big Stack Disabled error message when trying to use them.

; Add in LOCK as a program step
; Many expensive DROP commands done vs judiciously using CLX
; Changed local labels for everything except the untouched I%YR stuff to uppercase A-F (local Alpha Labels)
; Changed my CONSTANTS program to use local Alpha Labels a-e
; "I%YR" is the only function that still uses LNSTK
; Fixed: PMT had a bug in the formula for START mode when i≠0
; There is no LBL "IYR?"  ???? What does it do?
; What does "→AER" do?
; Removed STO "RESET", "CLEAR", "START", "STAR•", "END" & "END•" because they are pointless,
; also removed (the original) FLAG 01 and merged everything into "p"
; Can I rename "p" to something else (unless it's already a standard variable name)
; This program clutters Free42 with global variables that may exist in other user programs :-( 
; Removed STO IND "var" & DROP before RTN in all MVAR routines that return a value
; Change Result VIEW to var→result vs var=result to distinguish it from an MVAR STO. Plus42 is super confusing. 

; ERROR HANDLING:
; Need to be robust against a consecutive press when all the necessary variables haven't been entered.
; Need to be robust against impossible solutions yielding an error.
; Should I fix the fact that this mangles LASTx?
; If the calculation for "I%YR" breaks you'll unexpectedly end up in NSTK mode :-( 
; Need to do more error checking e.g. for illegal non-real values 
; If you do a first run and stupidly just press "N" then you get "Nonexistent", however program 
; execution has stopped at the error so now even doing START or STOP is broken because the program pointer 
; is still in the same place that caused the error. Need a way to catch these silly errors.
; Plus42 gives you N=1 in this case. It also filters out N=0 as Invalid Data
; Filter for N not being an integer and <0, PV=FV (?), PMT=0 (?), existence of required variables per function,
; odd values in START and END (strictly speaking they shouldn't exist)

000▸LBL ":TVM" ; primary menu (START, END•) to indicate END mode
001 MVAR "N"
002 MVAR "I%YR"
003 MVAR "PV"
004 MVAR "PMT"
005 MVAR "FV"
006 MVAR "P/YR"
007 MVAR "START"
008 MVAR "END•"
009 MVAR "IYR?"
010 MVAR "→AER"
011 MVAR "RESET"
012 MVAR "CLEAR"
013 GTO  G
014▸LBL "MENU2" ; second menu (STAR•, END) to indicate begin mode
015 MVAR "N"
016 MVAR "I%YR"
017 MVAR "PV"
018 MVAR "PMT"
019 MVAR "FV"
020 MVAR "P/YR"
021 MVAR "STAR•"
022 MVAR "END"
023 MVAR "IYR?"
024 MVAR "→AER"
025 MVAR "RESET"
026 MVAR "CLEAR"

027 LBL G
028 XEQ "RESET"    ; Main initialization. Does NOT clear all variables.
;---;-----------------------------
029▸LBL A          ; MAIN RUN LOOP (doesn't harm the stack)
;---;-----------------------------
030 XEQ "P"        ; run print subroutine
031 FC?C 00
032 AVIEW          ; Show the TVM state if a menu variable wasn't solved.
033 CLA
034 VARMNU1 ":TVM"
035 0≠? "p"        ; select correct menu according to START or STOP mode
036 VARMNU1 "MENU2"
037 STOP 
;                  ; When a VARMENU key is pressed immediately following another, it 
;                  ; puts MVAR in the Alpha-register and does XEQ IND MVAR from here.
;                  ; In all other cases, it performs STO IND MVAR and a VIEW IND MVAR
;                  ; and doesn't advance the program pointer. This allows dumb things   
;                  ; like storing values in START or END without setting the mode :-( 
;                  ; DM I got rid of a load of code which checked whether anything
;                  ; went into the alpha or not.  I'm not sure it was useful
;---;-----------------------------
038 FC? 80         ; check if in 4STK, if so store X, then CLX
039 LSTO "G"       ; I know this is ugly
040 FC? 80         ;
041 CLX            ; do nothing if NSTK
;---;-----------------------------
042 ALENG          ; check for exit
043 X=0?           ;
044 GTO 43         ; exit
;---;-----------------------------
045 FS? 80         ; if NSTK just drop
046 DROP
047 FC? 80         ; if 4STK return X value to stack
048 X<> "G"
;---;-----------------------------
049 ASTO "var"     ; A consecutive press occurred, MVAR placed in X
050 XEQ IND "var"  ; XEQ the menu variable. X contains the result if a calculation was done.
051 FC? 00         ; Check if nothing was placed in X 
052 GTO A          ; Nothing was returned
053 STO IND "var"  ; Something was returned: save and view it
054 ├":"           ; Use ":" vs "=" to distinguish between MVAR store and MVAR result
055 ARCL ST X 
056 AVIEW
057 GTO A
;---;--------------------------------------------------------------------------------------------
058 LBL "P"        ; create alpha display
;---;--------------------------------------------------------------------------------------------
059 FUNC 00
060 "P/YR="        ; print alpha display. show #payments/year and start/end mode.
061 RCL "P/YR"     ; payments/year (and temporarily save X-register in "P/YR")
062 AIP            ; append the integer part of X to the alpha register 
063 0=? "p"
064 ├", END mode"
065 0≠? "p"
066 ├", START mode"
067 CLX
068 RTN

;---;--------------------------------------------------------------------------------------------
069▸LBL "RESET" ; TVM INITIALIZATION,  p=0 (END mode), FV=IYR?=RESET=0, P/YR=12
;   ; Leaves the stack untouched
;   ; Merged old LBL 01 and RESET
;   ; ??? I also changed this to do FV=0 (consistent with Plus42 I think)
;---;--------------------------------------------------------------------------------------------
070 FUNC 00
071 12
072 STO "P/YR"   ; Set Payments/Yr to 12
073 CLX
074 STO "FV"     ; Set FV=0
075 STO "IYR?"   ; Set IYR?=0
076 STO "p"
077 RTN
;---;--------------------------------------------------------------------------------------------
078▸LBL "CLEAR"  ; clear all variables and SF 00. Leaves the stack untouched
;---;--------------------------------------------------------------------------------------------
079 FUNC 00
080 0
081 STO "PV"
082 STO "PMT"
083 STO "FV"
084 STO "I%YR"
085 STO "IYR?"
086 STO "N"
087 RTN
;---;--------------------------------------------------------------------------------------------
088▸LBL "START"
089▸LBL "STAR•"  ; Start mode ("p"=1)
;---;--------------------------------------------------------------------------------------------
090 STO "p"      ; save X-register
091 CLX
092 1
093 X<> "p"      ; Set p=1 for START mode and restore X-register
094 RTN
;---;--------------------------------------------------------------------------------------------
095▸LBL "END" 
096▸LBL "END•"   ; End mode ("p"=0)
;---;--------------------------------------------------------------------------------------------
097 STO "p"      ; save X-register
098 CLX
099 X<> "p"      ; Set p=0 for END mode and restore X-register
100 RTN
;---;--------------------------------------------------------------------------------------------
101▸LBL "P/YR" ; ??? Why is this needed?
;---;--------------------------------------------------------------------------------------------
102 STO "P/YR"
103 RTN
;---;--------------------------------------------------------------------------------------------
104▸LBL "N"    ; Solve for N (for i=0 & i≠0) (+2)
;---;--------------------------------------------------------------------------------------------
105 FUNC 01
106 SF 00      ; To signify this routine returns an answer in X
107 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
108 XEQ I      ; creates "i" and leaves it in X 
109 X=0?
110 GTO B      ; <---- Calculate N(i=0)  -(PV+FV)/PMT
111 1/X        ; <---- Calculate N(i≠0)  -ln[(PMT*(p+1/i)+PV)/(PMT*(p+1/i)-FV)]/ln(1+i)
112 RCL+ "p"   ; Optimized the way this formula was calculated
113 RCL× "PMT"
114 ENTER
115 RCL+ "PV"
116 X<>Y
117 RCL- "FV"
118 ÷
119 LN
120 RCL "i"
121 LN1+X
122 ÷
123 +/-
124 RTN
125▸LBL B      ; <---- Calculate N(i=0)
126 RCL "PV"
127 RCL+ "FV"
128 +/-
129 RCL÷ "PMT" ; This is the calculated value of N
130 RTN
;---;--------------------------------------------------------------------------------------------
131▸LBL "PV"   ; Solve for PV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
132 FUNC 01
133 SF 00      ; To signify this routine returns an answer in X
134 SF 01      ; Calculate "F" within XEQ I
135 XEQ I      ; creates "i" & "F" and leaves "i" in X 
136 X=0?
137 GTO C      ; <---- Calculate PV(i=0)   -(FV+PMT*N)
138 1/X        ; <---- Calculate PV(i≠0)   [PMT*(p+1/i)*(1-F)-FV]/F
139 RCL+ "p"   ; Optimized the way this formula was calculated
140 RCL× "PMT"
141 1
142 RCL- "F"
143 ×
144 RCL- "FV"
145 RCL÷ "F"
146 RTN
147▸LBL C      ; <---- Calculate PV(i=0)
148 RCL "PMT"
149 RCL× "N"
150 RCL+ "FV"
151 +/-
152 RTN
;---;--------------------------------------------------------------------------------------------
153▸LBL "FV"   ; Solve for FV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
154 FUNC 01
155 SF 00      ; To signify this routine returns an answer in X
156 SF 01      ; Calculate "F" within XEQ I
157 XEQ I      ; creates "i" & "F" and leaves "i" in X 
158 X=0?
159 GTO D      ; <---- Calculate FV(i=0)   -(PV+PMT*N)
160 1/X        ; <---- Calculate FV(i≠0)   PMT*(p+1/i)*(1-F)-PV*F    merged XEQ 22
161 RCL+ "p"   ; Optimized the way this formula was calculated
162 RCL× "PMT"
163 1
164 RCL- "F"
165 ×
166 RCL "PV"
167 RCL× "F"
168 -
169 RTN
170▸LBL D      ; <---- Calculate FV(i=0)
171 RCL "PMT"
172 RCL× "N"
173 RCL+ "PV"
174 +/-
175 RTN
;---;--------------------------------------------------------------------------------------------
176▸LBL "PMT"  ; Solve for PMT (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
177 FUNC 01
178 SF 00      ; To signify this routine returns an answer in X
179 SF 01      ; Calculate "F" within XEQ I
180 XEQ I      ; creates "i" & "F" and leaves "i" in X 
181 X=0?
182 GTO E      ; <---- Calculate PMT(i=0)   (FV-PV)/N
183 1/X        ; <---- Calculate PMT(i≠0)   (PV*F+FV)/(p+1/i)/(1-F)   merged LBL 19
184 RCL+ "p"   ; Optimized the way this formula was calculated
185 1
186 RCL- "F"
187 ×
188 RCL "PV"
189 RCL× "F"
190 RCL+ "FV"
191 X<>Y
192 ÷
193 RTN
194▸LBL E      ; <---- Calculate PMT(i=0)
195 RCL "FV"
196 RCL- "PV"
197 RCL÷ "N"
198 RTN
;---;--------------------------------------------------------------------------------------------
199▸LBL "→AER" ;  Calculates 100*((1+i)^"P/YR"-1)
;---;--------------------------------------------------------------------------------------------
200 FUNC 01
201 SF 00      ; To signify this routine returns an answer in X
202 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
203 XEQ I      ; Went this route vs calculating "i" in-place
204 1
205 +
206 RCL "P/YR"
207 Y↑X
208 1
209 -
210 100
211 ×
212 RTN
;---;--------------------------------------------------------------------------------------------
213▸LBL I   ; Calculates i = "I%YR"/100/"P/YR" and (optionally) F = (1+i)^N
;   ;       ; (+2), Returns with "i" in X) Called by N, FV, PV, PMT, →AER
;---;--------------------------------------------------------------------------------------------
214 RCL "P/YR"
215 1/X
216 RCL "I%YR"
217 %
218 STO "i"    ; i = "I%YR"/100/"P/YR"
219 FC? 01     ; Need to catch if "N" is defined for the RCL× "N" below
220 RTN
221 LN1+X
222 RCL× "N"   ; ??? BUG if calculating N, FV, PV or PMT when "N" isn't defined yet! 1st time run 
223 E↑X
224 STO "F"    ; F = e^(N*ln(1+i))  <---- ??? isn't this just (1+i)^N
225 RCL "i"    ; ??? Changed this to return "i" vs "I%YR"
226 RTN
;---;--------------------------------------------------------------------------------------------
227▸LBL "I%YR" ;  (for Start_mode & End_mode) Consumes LBLs 24-5, 41-2, 30-7
;---; Holy cow this is unbelievably complex! Consumes 10 local labels.
;---;--------------------------------------------------------------------------------------------
228 FUNC 01
229 LNSTK
230 SF 00      ; To signify this routine returns an answer in X
231 0=? "p"    ; (removed RCL "p", X=0?)
232 GTO 41     ; End mode
233 RCL "PV"   ; <---- Calculate I%YR(Start_mode)
234 RCL+ "PMT"
235 LSTO "pv"   ; pv = PV+PMT
236 RCL "FV"
237 RCL- "PMT"
238 LSTO "fv"   ; fv = FV-PMT
239 GTO 42
;---;-----------------------
240▸LBL 41     ; <---- Calculate I%YR(End_mode) - simply copy values
;---;-----------------------
241 RCL "FV"
242 LSTO "fv"
243 RCL "PV"
244 LSTO "pv"
;---;-----------------------
245▸LBL 42     ; referenced by 239
;---;-----------------------
246 RCL "IYR?" ; needed to return this or else the guess isn't used
247 X=0?
248 XEQ 24     ; if not, run interest rate guess
249 STO "I%YR" ; starting interest rate,  ??? another redundant calculation of "i"
250 RCL "P/YR"
251 1/X
252 %
253 STO "i"    ; starting i = "I%YR"/100/"P/YR"
254 CLX 
255 2
256 LSTO "g"    ; force at least 2 cycles of the loop
257 CLX
258 LSTO "f"
259 CLX        ; used to be DROP
;---;-----------------------
260▸LBL 30     ; start of Newton solve (adapted from plus42).
;              ; (+3) Spans LBLs 30-37. referenced by 380, 386, 400
;---;-----------------------
261 RCL "f"
262 LSTO "eps"
263 LSTO "f0"
264 CLX
265 RCL "i"
266 ENTER
267 ×          ; ??? why not just do x^2
268 1
269 +
270 1
271 X=Y?       ; check if i is very small by comparing 1 with 1+i^2
272 GTO 31     ; if so switch to Secant method (do people really care about this!?)
273 DROPN 2
274 RCL "i"
275 LN1+X
276 RCL× "N"
277 E↑X-1
278 RCL "i"
279 X<>Y
280 ÷
281 DUP
282 RCL "N"
283 ×
284 1
285 -
286 LSTO "y"
287 DROP
288 RCL "pv"
289 RCL+ "fv"
290 ×
291 LSTO "k"
292 RCL "pv"
293 RCL× "i"
294 +
295 RCL+ "PMT"
296 LSTO "f"
297 DROP
298 RCL "N"
299 1
300 -
301 RCL× "i"
302 RCL+ "y"
303 LSTO "num"
304 DROP
305 RCL "i"
306 ENTER
307 ×
308 RCL+ "i"
309 LSTO "den"  ; ??? only used 3 & 7 lines later (use the stack)
310 DROP
311 RCL "f"
312 RCL× "den"
313 RCL "k"
314 RCL× "num"
315 RCL "pv"
316 RCL× "den"
317 -
318 ÷
319 LSTO "eps"
320 RCL+ "i"
321 STO "i"
322 DROP
323 GTO 32     ; check success of iteration
;---;-----------------------
324▸LBL 31     ; The secant method. (+1) referenced by 271
;---;-----------------------
325 DROPN 2
326 RCL "pv"
327 RCL+ "fv"
328 RCL÷ "N"
329 LSTO "a"
330 DROP
331 RCL "pv"
332 RCL- "fv"
333 LSTO "b"
334 DROP
335 RCL "a"
336 RCL+ "b"
337 2
338 ÷
339 STO "fp"
340 DROP
341 RCL "N"
342 ENTER
343 ×
344 1
345 -
346 RCL× "a"
347 6
348 ÷
349 LSTO "fpp"   ; ??? only used once 8 lines later (use the stack)
350 DROP
351 RCL "fp"
352 RCL× "i"
353 RCL+ "PMT"
354 RCL+ "a"
355 LSTO "f"
356 DROP
357 RCL "fpp"
358 RCL× "i"
359 RCL+ "fp"
360 LSTO "fp2"   ; ??? only used once 4 lines later (use the stack)
361 DROP
362 RCL "f"
363 +/-
364 RCL÷ "fp2"
365 LSTO "eps"
366 RCL+ "i"
367 STO "i"
368 DROP
;---;-----------------------
369▸LBL 32     ; (+2) referenced by 322
;---;-----------------------
370 RCL "g"    ; forces at least two cycles of loop
371 X>0?
372 GTO 34
373 DROP       ; this used to be GTO 35 which was only called from here so I merged it
374 RCL "f0"
375 ABS
376 RCL "f"
377 ABS
378 X≥Y?       ; is guess worsening or same?
379 GTO 36
380 DROPN 2
381 GTO 30     ; return to start, going to 30 with nothing on the stack
;---;-----------------------
382▸LBL 34     ; Decrement "g" and GTO 30 (+1) referenced by 371  ??? there has to be a way to do DSE "g"
;---;-----------------------
383 1
384 -
385 LSTO "g"
386 DROP
387 GTO 30     ; going to 30 with nothing on the stack
;---;-----------------------
388▸LBL 36     ; referenced by 378
;---;-----------------------
389 DROPN 2
390 RCL "eps"
391 1000
392 ÷
393 RCL "i"
394 X<>Y
395 -
396 RCL "i"
397 X=Y?       ; break if good guess
398 GTO 37
399 DROPN 2    ; merged in LBL 38
400 RCL "i"
401 GTO 30     ; going to 30 with an item on the stack  ???? (as opposed to LBL 32,34)
;---;-----------------------
402▸LBL 37     ; referenced by 397
;---;-----------------------
403 DROPN 3
404 RCL "eps"
405 2
406 ÷
407 RCL "i"
408 X<>Y
409 -           ; last improvement to i solve post break.
410 RCL× "P/YR" ; i -> I%YR
411 100
412 ×
413 RTN
;---;-----------------------
414▸LBL 24     ; initial interest rate guess (via Albert Chan's code). Contains LBL 25. referenced by 247
;              ; Takes no inputs, returns a guess for I%YR
;---;-----------------------
415 RCL "fv"
416 RCL+ "pv"
417 RCL÷ "N"
418 LSTO "a"    ; a = (fv+pv)/N
419 RCL "fv"
420 RCL- "pv"
421 X<>Y
422 -
423 LSTO "b"    ; b = (fv-pv) - (fv+pv)/N
424 DROP
425 RCL "PMT"
426 RCL+ "a"
427 RCL÷ "b"
428 LSTO "c"    ; c = PMT+a+b   ??? only used once 9 lines later (use the stack)
429 RCL "N"
430 X↑2
431 RCL× "a"
432 ×
433 RCL÷ "b"
434 LSTO "d"    ; d = a/b*N^2   ??? only used once 4 lines later (use the stack)
435 3
436 -
437 RCL× "c"
438 RCL "d"
439 1.5
440 -
441 ÷
442 RCL× "P/YR" ; guess = "P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
443 100
444 ×           ; guess = 100*"P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
445 X>=0?       ; if guess is positive then return 
446 RTN
447 RCL "fv"    ; back up i guess (edge guess). referenced by 506 (was LBL 25)
448 RCL "pv"
449 ×           ; 2 items on the stack at this point
450 X≠0?        ; fv*pv = 0?
451 GTO 25
452 DROP 
453 RTN
454 LBL 25
455 DROPN 2     ; Y-register no longer needed.  
456 RCL "PMT"
457 RCL÷ "fv"
458 RCL "PMT"
459 +/-
460 RCL÷ "pv"
461 X>Y?        ; this can get cleaned up
462 X<>Y
463 CLX
464 100
465 ×
466 RTN
467 LBL 43      ; cleanup on exit
468 FS? 80
469 DROP
470 FC? 80
471 X<> "G"
472 END
