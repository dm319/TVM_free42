;-----------------------------------------------------------------------------
; #  | N  | I%YR | PV | PMT   | FV | P/YR | End ||   TVM v9    |   Plus42    |
;----|----|------|----|-------|----|------|-----||-------------|-------------|
; 01 | ?  |  5%  | 1M | -5k   | 0  |  12  | yes ||    430.9175 |    430.9175 |
; 02 | ?  |  5%  | 1M | -2000 | 0  |  12  | no  ||    425.9790 |    425.9790 |
; 03 | 1k |  ?   | 1M | -2000 | 0  |  12  | yes ||      1.9113 |      1.9113 |
; 04 | 1k |  ?   | 1M | -2000 | 0  |  12  | no  ||      1.9164 |      1.9164 |
; 05 | 1k |  5%  | ?  | -2000 | 0  |  12  | yes || 472493.4501 | 472493.4501 |
; 06 | 1k |  5%  | ?  | -2000 | 0  |  12  | no  || 474462.1728 | 472493.4501 |
; 07 | 1k |  5%  | 1M | ?     | 0  |  12  | yes ||  -4232.8629 |  -4232.8629 |
; 08 | 1k |  5%  | 1M | ?     | 0  |  12  | no  ||  -4215.2992 |  -4215.2992 |
;-----------------------------------------------------------------------------

; Original test cases:
;------------------------------------------------------------------------------------------------------
; #  | N            | I%YR      | PV       | PMT          | FV        | P/YR | End || TVM v9 | Plus42 |
;----|--------------|-----------|----------|--------------|-----------|------|-----||--------|--------|
; 1  | 38 x 12      | 5.25%     | 270'000  | ?            | 0         | 12   | yes ||  34    |  34    |
; 1b | 38 x 12      | ?         | 270'000  | -14'584/12   | 0         | 12   | yes ||  33.1  |  33.1  |
; 2  | 360          | 15% → 12% | 100'000  | ?-?          | 0         | 12   | yes ||  33.2  |  32.4  |
; 3  | 60x60x24x365 | 10%       | 0        | -0.01        | ?         | =N   | yes ||  32.7  |  33.7  |
; 4  | 480          | 0 → ?     | 100'000  | ?→ PMT       | 0         | 12   | yes ||  Inf   |  Inf   |
; 5  | 10           | ?         | 50       | -30          | 400       | 1    | yes ||  32.3  |  31.8  |
; 6  | 10           | ?         | 50       | -30          | 80        | 1    | yes ||  32.5  |  32.3  |
; 7  | 10           | ?         | -100     | 10           | 1e-10     | 12   | yes ||  31.1  |  31.4  |
; 8  | 32           | ?         | -999'999 | 0            | 1e6       | 1    | yes ||  39.2  |  35.5  |
; 9  | ?            | 25        | 100000   | -2083.333334 | 0         | 12   | yes ||  33.4  |  29.8  |
; 10 | ?            | 25        | 100000   | -2040.816327 | 0         | 12   | no  ||  33.4  |  30.3  |
; 11 | 60x24x365    | 1/6% → ?  | 0        | -0.01        | ?→ FV     | =N   | yes ||  28.6  |  31    |
; 12 | 40           | ? → I%YR  | 900      | -400         | -1000 → ? | 1    | no  ||  Inf   |  23.7  |
;------------------------------------------------------------------------------------------------------

; FLAG 00  0 → Nothing   is returned (default)
;          1 → Something is returned. Used by N, I%YR, PV, PMT, FV, →AER
; FLAG 01  Used for temporary purposes 
; "p"      0 → End_Mode,   use TVM menu (which shows "START" & "END•")
;          1 → Start_Mode, use MENU2    (which shows "STAR•" & "END")

; On a first run, Plus42 doesn't need FV entered to do #1, Duncan's program does. I changed that. 

; Plus42's menus stay at their level and only change via the up/down buttons. Different for :TVM
; Plus42 doesn't AVIEW anything when you do CLEAR, this program does.
; Plus42 uses BEGIN, :TVM uses START  ???
; Could we make a SHOW TVM so you can see ALL the 5 primary numbers? (only practical in Plus42)
; Made LOCAL variables for: den, num, k, y, f0, f, g, pv, fv, fpp, fp2, eps, a, b, c, d
; In Plus42, if you change modes then you can't recalculate a variable with one press. You can here :-) 

; Darn it - this will cause trouble, it also requires Free42 3.0...
; NOTE: In Free42 (but not in Plus42), Allow Big Stack (NSTK) mode must be turned on
;       in the Preferences in order to use the NSTK or LNSTK functions. If not, you
;       will get the Big Stack Disabled error message when trying to use them.

; Add in LOCK as a program step
; Many expensive DROP commands done vs judiciously using CLX
; Changed local labels for everything except the untouched I%YR stuff to uppercase A-F (local Alpha Labels)
; Changed my CONSTANTS program to use local Alpha Labels a-e
; "I%YR" is the only function that still uses LNSTK
; Fixed: PMT had a bug in the formula for START mode when i≠0
; There is no LBL "IYR?"  ???? What does it do?
; What does "→AER" do?
; Removed STO "RESET", "CLEAR", "START", "STAR•", "END" & "END•" because they are pointless,
; also removed (the original) FLAG 01 and merged everything into "p"
; Can I rename "p" to something else (unless it's already a standard variable name)
; This program clutters Free42 with global variables that may exist in other user programs :-( 
; Removed STO IND "var" & DROP before RTN in all MVAR routines that return a value
; Change Result VIEW to var→result vs var=result to distinguish it from an MVAR STO. Plus42 is super confusing. 

; ERROR HANDLING:
; Need to be robust against a consecutive press when all the necessary variables haven't been entered.
; Need to be robust against impossible solutions yielding an error.
; Should I fix the fact that this mangles LASTx?
; If the calculation for "I%YR" breaks you'll unexpectedly end up in NSTK mode :-( 
; Need to do more error checking e.g. for illegal non-real values 
; If you do a first run and stupidly just press "N" then you get "Nonexistent", however program 
; execution has stopped at the error so now even doing START or STOP is broken because the program pointer 
; is still in the same place that caused the error. Need a way to catch these silly errors.
; Plus42 gives you N=1 in this case. It also filters out N=0 as Invalid Data
; Filter for N not being an integer and <0, PV=FV (?), PMT=0 (?), existence of required variables per function,
; odd values in START and END (strictly speaking they shouldn't exist)

000▸LBL ":TVM" ; primary menu (START, END•) to indicate END mode
001 MVAR "N"
002 MVAR "I%YR"
003 MVAR "PV"
004 MVAR "PMT"
005 MVAR "FV"
006 MVAR "P/YR"
007 MVAR "START"
008 MVAR "END•"
009 MVAR "IYR?"
010 MVAR "→AER"
011 MVAR "RESET"
012 MVAR "CLEAR"
013 GTO  G
014▸LBL "MENU2" ; second menu (STAR•, END) to indicate begin mode
015 MVAR "N"
016 MVAR "I%YR"
017 MVAR "PV"
018 MVAR "PMT"
019 MVAR "FV"
020 MVAR "P/YR"
021 MVAR "STAR•"
022 MVAR "END"
023 MVAR "IYR?"
024 MVAR "→AER"
025 MVAR "RESET"
026 MVAR "CLEAR"

027 LBL G
028 XEQ "RESET"    ; Main initialization. Does NOT clear all variables.
;---;-----------------------------
029▸LBL A          ; MAIN RUN LOOP (doesn't harm the stack)
;---;-----------------------------
030 XEQ "P"        ; run print subroutine
031 FC?C 00
032 AVIEW          ; Show the TVM state if a menu variable wasn't solved.
033 CLA
034 VARMNU1 ":TVM"
035 0≠? "p"        ; select correct menu according to START or STOP mode
036 VARMNU1 "MENU2"
037 STOP 
;                  ; When a VARMENU key is pressed immediately following another, it 
;                  ; puts MVAR in the Alpha-register and does XEQ IND MVAR from here.
;                  ; In all other cases, it performs STO IND MVAR and a VIEW IND MVAR
;                  ; and doesn't advance the program pointer. This allows dumb things   
;                  ; like storing values in START or END without setting the mode :-( 
;                  ; DM I got rid of a load of code which checked whether anything
;                  ; went into the alpha or not.  I'm not sure it was useful
;---;-----------------------------
000 FC? 80         ; Check if in 4STK, if so store X, then CLX
000 LSTO G         ; I know this is ugly
000 FC? 80         ;
000 CLX            ;
;---;-----------------------------
000 ALENG          ; check for exit
000 X=0?           ;
000 GTO 43         ; exit
;---;-----------------------------
000 FS? 80         ; if NSTK just drop
000 DROP
000 FC? 80         ; if 4STK return X value to stack
000 X<> "G"
;---;-----------------------------
038 ASTO "var"     ; A consecutive press occurred, MVAR placed in X
039 XEQ IND "var"  ; XEQ the menu variable. X contains the result if a calculation was done.
040 FC? 00         ; Check if nothing was placed in X 
041 GTO A          ; Nothing was returned
042 STO IND "var"  ; Something was returned: save and view it
043 ├":"           ; Use ":" vs "=" to distinguish between MVAR store and MVAR result
044 ARCL ST X 
045 AVIEW
046 GTO A
;---;--------------------------------------------------------------------------------------------
047 LBL "P"        ; create alpha display
;---;--------------------------------------------------------------------------------------------
048 FUNC 00
049 "P/YR="        ; print alpha display. show #payments/year and start/end mode.
050 RCL "P/YR"     ; payments/year (and temporarily save X-register in "P/YR")
051 AIP            ; append the integer part of X to the alpha register 
052 0=? "p"
053 ├", END mode"
054 0≠? "p"
055 ├", START mode"
056 CLX
057 RTN

;---;--------------------------------------------------------------------------------------------
058▸LBL "RESET" ; TVM INITIALIZATION,  p=0 (END mode), FV=IYR?=RESET=0, P/YR=12
;   ; Leaves the stack untouched
;   ; Merged old LBL 01 and RESET
;   ; ??? I also changed this to do FV=0 (consistent with Plus42 I think)
;---;--------------------------------------------------------------------------------------------
059 FUNC 00
060 12
061 STO "P/YR"   ; Set Payments/Yr to 12
062 CLX
063 STO "FV"     ; Set FV=0
064 STO "IYR?"   ; Set IYR?=0
065 STO "p"
066 RTN
;---;--------------------------------------------------------------------------------------------
067▸LBL "CLEAR"  ; clear all variables and SF 00. Leaves the stack untouched
;---;--------------------------------------------------------------------------------------------
068 FUNC 00
069 0
070 STO "PV"
071 STO "PMT"
072 STO "FV"
073 STO "I%YR"
074 STO "IYR?"
075 STO "N"
076 RTN
;---;--------------------------------------------------------------------------------------------
077▸LBL "START"
078▸LBL "STAR•"  ; Start mode ("p"=1)
;---;--------------------------------------------------------------------------------------------
079 STO "p"      ; save X-register
080 CLX
081 1
082 X<> "p"      ; Set p=1 for START mode and restore X-register
083 RTN
;---;--------------------------------------------------------------------------------------------
084▸LBL "END" 
085▸LBL "END•"   ; End mode ("p"=0)
;---;--------------------------------------------------------------------------------------------
086 STO "p"      ; save X-register
087 CLX
088 X<> "p"      ; Set p=0 for END mode and restore X-register
089 RTN
;---;--------------------------------------------------------------------------------------------
090▸LBL "P/YR" ; ??? Why is this needed?
;---;--------------------------------------------------------------------------------------------
091 STO "P/YR"
092 RTN
;---;--------------------------------------------------------------------------------------------
093▸LBL "N"    ; Solve for N (for i=0 & i≠0) (+2)
;---;--------------------------------------------------------------------------------------------
094 FUNC 01
095 SF 00      ; To signify this routine returns an answer in X
096 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
097 XEQ I      ; creates "i" and leaves it in X 
098 X=0?
099 GTO B      ; <---- Calculate N(i=0)  -(PV+FV)/PMT
100 1/X        ; <---- Calculate N(i≠0)  -ln[(PMT*(p+1/i)+PV)/(PMT*(p+1/i)-FV)]/ln(1+i)
101 RCL+ "p"   ; Optimized the way this formula was calculated
102 RCL× "PMT"
103 ENTER
104 RCL+ "PV"
105 X<>Y
106 RCL- "FV"
107 ÷
108 LN
109 RCL "i"
110 LN1+X
111 ÷
112 +/-
113 RTN
114▸LBL B      ; <---- Calculate N(i=0)
115 RCL "PV"
116 RCL+ "FV"
117 +/-
118 RCL÷ "PMT" ; This is the calculated value of N
119 RTN
;---;--------------------------------------------------------------------------------------------
120▸LBL "PV"   ; Solve for PV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
121 FUNC 01
122 SF 00      ; To signify this routine returns an answer in X
123 SF 01      ; Calculate "F" within XEQ I
124 XEQ I      ; creates "i" & "F" and leaves "i" in X 
125 X=0?
126 GTO C      ; <---- Calculate PV(i=0)   -(FV+PMT*N)
127 1/X        ; <---- Calculate PV(i≠0)   [PMT*(p+1/i)*(1-F)-FV]/F
128 RCL+ "p"   ; Optimized the way this formula was calculated
129 RCL× "PMT"
130 1
131 RCL- "F"
132 ×
133 RCL- "FV"
134 RCL÷ "F"
135 RTN
136▸LBL C      ; <---- Calculate PV(i=0)
137 RCL "PMT"
138 RCL× "N"
139 RCL+ "FV"
140 +/-
141 RTN
;---;--------------------------------------------------------------------------------------------
142▸LBL "FV"   ; Solve for FV (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
143 FUNC 01
144 SF 00      ; To signify this routine returns an answer in X
145 SF 01      ; Calculate "F" within XEQ I
146 XEQ I      ; creates "i" & "F" and leaves "i" in X 
147 X=0?
148 GTO D      ; <---- Calculate FV(i=0)   -(PV+PMT*N)
149 1/X        ; <---- Calculate FV(i≠0)   PMT*(p+1/i)*(1-F)-PV*F    merged XEQ 22
150 RCL+ "p"   ; Optimized the way this formula was calculated
151 RCL× "PMT"
152 1
153 RCL- "F"
154 ×
155 RCL "PV"
156 RCL× "F"
157 -
158 RTN
159▸LBL D      ; <---- Calculate FV(i=0)
160 RCL "PMT"
161 RCL× "N"
162 RCL+ "PV"
163 +/-
164 RTN
;---;--------------------------------------------------------------------------------------------
165▸LBL "PMT"  ; Solve for PMT (for i=0 & i≠0)
;---;--------------------------------------------------------------------------------------------
166 FUNC 01
167 SF 00      ; To signify this routine returns an answer in X
168 SF 01      ; Calculate "F" within XEQ I
169 XEQ I      ; creates "i" & "F" and leaves "i" in X 
170 X=0?
171 GTO E      ; <---- Calculate PMT(i=0)   (FV-PV)/N
172 1/X        ; <---- Calculate PMT(i≠0)   (PV*F+FV)/(p+1/i)/(1-F)   merged LBL 19
173 RCL+ "p"   ; Optimized the way this formula was calculated
174 1
175 RCL- "F"
176 ×
177 RCL "PV"
178 RCL× "F"
179 RCL+ "FV"
180 X<>Y
181 ÷
182 RTN
183▸LBL E      ; <---- Calculate PMT(i=0)
184 RCL "FV"
185 RCL- "PV"
186 RCL÷ "N"
187 RTN
;---;--------------------------------------------------------------------------------------------
188▸LBL "→AER" ;  Calculates 100*((1+i)^"P/YR"-1)
;---;--------------------------------------------------------------------------------------------
189 FUNC 01
190 SF 00      ; To signify this routine returns an answer in X
191 CF 01      ; Do NOT calculate "F" (which requires "N") within XEQ I
192 XEQ I      ; Went this route vs calculating "i" in-place
193 1
194 +
195 RCL "P/YR"
196 Y↑X
197 1
198 -
199 100
200 ×
201 RTN
;---;--------------------------------------------------------------------------------------------
202▸LBL I   ; Calculates i = "I%YR"/100/"P/YR" and (optionally) F = (1+i)^N
;   ;       ; (+2), Returns with "i" in X) Called by N, FV, PV, PMT, →AER
;---;--------------------------------------------------------------------------------------------
203 RCL "P/YR"
204 1/X
205 RCL "I%YR"
206 %
207 STO "i"    ; i = "I%YR"/100/"P/YR"
208 FC? 01     ; Need to catch if "N" is defined for the RCL× "N" below
209 RTN
210 LN1+X
211 RCL× "N"   ; ??? BUG if calculating N, FV, PV or PMT when "N" isn't defined yet! 1st time run 
212 E↑X
213 STO "F"    ; F = e^(N*ln(1+i))  <---- ??? isn't this just (1+i)^N
214 RCL "i"    ; ??? Changed this to return "i" vs "I%YR"
215 RTN
;---;--------------------------------------------------------------------------------------------
216▸LBL "I%YR" ;  (for Start_mode & End_mode) Consumes LBLs 24-5, 41-2, 30-7
;---; Holy cow this is unbelievably complex! Consumes 10 local labels.
;---;--------------------------------------------------------------------------------------------
217 FUNC 01
218 LNSTK
219 SF 00      ; To signify this routine returns an answer in X
220 0=? "p"    ; (removed RCL "p", X=0?)
221 GTO 41     ; End mode
222 RCL "PV"   ; <---- Calculate I%YR(Start_mode)
223 RCL+ "PMT"
224 LSTO "pv"   ; pv = PV+PMT
225 RCL "FV"
226 RCL- "PMT"
227 LSTO "fv"   ; fv = FV-PMT
228 GTO 42
;---;-----------------------
229▸LBL 41     ; <---- Calculate I%YR(End_mode) - simply copy values
;---;-----------------------
230 RCL "FV"
231 LSTO "fv"
232 RCL "PV"
233 LSTO "pv"
;---;-----------------------
234▸LBL 42     ; referenced by 239
;---;-----------------------
235 RCL "IYR?" ; needed to return this or else the guess isn't used
236 X=0?
237 XEQ 24     ; if not, run interest rate guess
238 STO "I%YR" ; starting interest rate,  ??? another redundant calculation of "i"
239 RCL "P/YR"
240 1/X
241 %
242 STO "i"    ; starting i = "I%YR"/100/"P/YR"
243 CLX 
244 2
245 LSTO "g"    ; force at least 2 cycles of the loop
246 CLX
247 LSTO "f"
248 CLX        ; used to be DROP
;---;-----------------------
249▸LBL 30     ; start of Newton solve (adapted from plus42).
;              ; (+3) Spans LBLs 30-37. referenced by 380, 386, 400
;---;-----------------------
250 RCL "f"
251 LSTO "eps"
252 LSTO "f0"
253 CLX
254 RCL "i"
255 ENTER
256 ×          ; ??? why not just do x^2
257 1
258 +
259 1
260 X=Y?       ; check if i is very small by comparing 1 with 1+i^2
261 GTO 31     ; if so switch to Secant method (do people really care about this!?)
262 DROPN 2
263 RCL "i"
264 LN1+X
265 RCL× "N"
266 E↑X-1
267 RCL "i"
268 X<>Y
269 ÷
270 DUP
271 RCL "N"
272 ×
273 1
274 -
275 LSTO "y"
276 DROP
277 RCL "pv"
278 RCL+ "fv"
279 ×
280 LSTO "k"
281 RCL "pv"
282 RCL× "i"
283 +
284 RCL+ "PMT"
285 LSTO "f"
286 DROP
287 RCL "N"
288 1
289 -
290 RCL× "i"
291 RCL+ "y"
292 LSTO "num"
293 DROP
294 RCL "i"
295 ENTER
296 ×
297 RCL+ "i"
298 LSTO "den"  ; ??? only used 3 & 7 lines later (use the stack)
299 DROP
300 RCL "f"
301 RCL× "den"
302 RCL "k"
303 RCL× "num"
304 RCL "pv"
305 RCL× "den"
306 -
307 ÷
308 LSTO "eps"
309 RCL+ "i"
310 STO "i"
311 DROP
312 GTO 32     ; check success of iteration
;---;-----------------------
313▸LBL 31     ; The secant method. (+1) referenced by 271
;---;-----------------------
314 DROPN 2
315 RCL "pv"
316 RCL+ "fv"
317 RCL÷ "N"
318 LSTO "a"
319 DROP
320 RCL "pv"
321 RCL- "fv"
322 LSTO "b"
323 DROP
324 RCL "a"
325 RCL+ "b"
326 2
327 ÷
328 STO "fp"
329 DROP
330 RCL "N"
331 ENTER
332 ×
333 1
334 -
335 RCL× "a"
336 6
337 ÷
338 LSTO "fpp"   ; ??? only used once 8 lines later (use the stack)
339 DROP
340 RCL "fp"
341 RCL× "i"
342 RCL+ "PMT"
343 RCL+ "a"
344 LSTO "f"
345 DROP
346 RCL "fpp"
347 RCL× "i"
348 RCL+ "fp"
349 LSTO "fp2"   ; ??? only used once 4 lines later (use the stack)
350 DROP
351 RCL "f"
352 +/-
353 RCL÷ "fp2"
354 LSTO "eps"
355 RCL+ "i"
356 STO "i"
357 DROP
;---;-----------------------
358▸LBL 32     ; (+2) referenced by 322
;---;-----------------------
359 RCL "g"    ; forces at least two cycles of loop
360 X>0?
361 GTO 34
362 DROP       ; this used to be GTO 35 which was only called from here so I merged it
363 RCL "f0"
364 ABS
365 RCL "f"
366 ABS
367 X≥Y?       ; is guess worsening or same?
368 GTO 36
369 DROPN 2
370 GTO 30     ; return to start, going to 30 with nothing on the stack
;---;-----------------------
371▸LBL 34     ; Decrement "g" and GTO 30 (+1) referenced by 371  ??? there has to be a way to do DSE "g"
;---;-----------------------
372 1
373 -
374 LSTO "g"
375 DROP
376 GTO 30     ; going to 30 with nothing on the stack
;---;-----------------------
377▸LBL 36     ; referenced by 378
;---;-----------------------
378 DROPN 2
379 RCL "eps"
380 1000
381 ÷
382 RCL "i"
383 X<>Y
384 -
385 RCL "i"
386 X=Y?       ; break if good guess
387 GTO 37
388 DROPN 2    ; merged in LBL 38
389 RCL "i"
390 GTO 30     ; going to 30 with an item on the stack  ???? (as opposed to LBL 32,34)
;---;-----------------------
391▸LBL 37     ; referenced by 397
;---;-----------------------
392 DROPN 3
393 RCL "eps"
394 2
395 ÷
396 RCL "i"
397 X<>Y
398 -           ; last improvement to i solve post break.
399 RCL× "P/YR" ; i -> I%YR
400 100
401 ×
402 RTN
;---;-----------------------
403▸LBL 24     ; initial interest rate guess (via Albert Chan's code). Contains LBL 25. referenced by 247
;              ; Takes no inputs, returns a guess for I%YR
;---;-----------------------
404 RCL "fv"
405 RCL+ "pv"
406 RCL÷ "N"
407 LSTO "a"    ; a = (fv+pv)/N
408 RCL "fv"
409 RCL- "pv"
410 X<>Y
411 -
412 LSTO "b"    ; b = (fv-pv) - (fv+pv)/N
413 DROP
414 RCL "PMT"
415 RCL+ "a"
416 RCL÷ "b"
417 LSTO "c"    ; c = PMT+a+b   ??? only used once 9 lines later (use the stack)
418 RCL "N"
419 X↑2
420 RCL× "a"
421 ×
422 RCL÷ "b"
423 LSTO "d"    ; d = a/b*N^2   ??? only used once 4 lines later (use the stack)
424 3
425 -
426 RCL× "c"
427 RCL "d"
428 1.5
429 -
430 ÷
431 RCL× "P/YR" ; guess = "P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
432 100
433 ×           ; guess = 100*"P/YR"*c*(d-3)/(d-1.5)     (one item added to the stack)
434 X>=0?       ; if guess is positive then return 
435 RTN
436 RCL "fv"    ; back up i guess (edge guess). referenced by 506 (was LBL 25)
437 RCL "pv"
438 ×           ; 2 items on the stack at this point
439 X≠0?        ; fv*pv = 0?
440 GTO 25
441 DROP 
442 RTN
443 LBL 25
444 DROPN 2     ; Y-register no longer needed.  
445 RCL "PMT"
446 RCL÷ "fv"
447 RCL "PMT"
448 +/-
449 RCL÷ "pv"
450 X>Y?        ; this can get cleaned up
451 X<>Y
452 CLX
453 100
454 ×
455 RTN
000 LBL 43      ; cleanup on exit
000 FS? 80
000 DROP
000 FC? 80
000 X<> "G"
456 END
